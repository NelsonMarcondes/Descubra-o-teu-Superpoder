1. Branch Principal (main ou master):

Esta branch deve sempre refletir o estado estável e pronto para produção do projeto (mesmo que não haja uma implantação contínua imediata).
Proteção: Esta branch deve ser protegida para evitar commits diretos. Todas as alterações devem ser feitas através de Pull Requests (PRs).
2. Branch de Desenvolvimento (develop):

Esta branch serve como a base para a integração de todas as novas funcionalidades.
As branches de feature são criadas a partir da develop e, após a conclusão e revisão, são mergeadas de volta para a develop.
A develop é onde os testes de integração e outras verificações de qualidade são realizadas.
Periodicamente, quando a develop atinge um estado estável com um conjunto significativo de funcionalidades, ela pode ser mergeada para a main (geralmente marcando uma "release" ou versão).
3. Branches de Funcionalidade (feature/*):

Para cada nova funcionalidade, componente (ex: feature/chatbot, feature/teste-vocacional), ou tarefa específica, uma nova branch é criada a partir da develop.
O nome da branch deve ser descritivo e seguir um padrão (ex: feature/implementar-login, feature/design-pagina-inicial).
Os desenvolvedores trabalham em suas respectivas branches de funcionalidade, realizando commits regulares que descrevam o progresso.
Boas práticas para commits em branches de funcionalidade:
Commits frequentes e pequenos.
Mensagens de commit claras e concisas, explicando o que foi alterado.
Manter a branch de funcionalidade atualizada com a develop (através de git merge develop ou git rebase develop).
4. Pull Requests (PRs):

Quando uma funcionalidade estiver completa e pronta para ser integrada, o desenvolvedor abre um Pull Request (PR) da sua branch de funcionalidade para a branch develop.
O PR deve incluir:
Uma descrição clara do que a funcionalidade implementa e qual problema ela resolve.
Instruções para reviewers sobre como testar a funcionalidade.
Referências a issues do GitHub (se aplicável).
Revisão de Código: Outros membros da equipe revisam o código no PR, fornecendo feedback e sugestões.
Discussão: O PR serve como um espaço para discussão sobre o código e a implementação.
Testes Automatizados: Se configurado, o GitHub Actions pode executar testes automatizados no PR para garantir a qualidade do código.
Aprovação: Após a revisão e as alterações necessárias serem feitas, o PR é aprovado por um ou mais membros da equipe.
5. Merge para develop:

Uma vez aprovado, a branch de funcionalidade é mergeada para a branch develop.
Geralmente, utiliza-se o merge com --no-ff (no fast-forward) para manter um histórico explícito de quando a funcionalidade foi integrada.
6. Branches de Release (release/*):

Quando a branch develop atinge um estado que representa uma versão a ser lançada (mesmo que seja uma versão interna ou um protótipo significativo), uma branch de release é criada a partir da develop.
O nome da branch deve indicar a versão (ex: release/1.0.0, release/beta).
Nesta branch, são realizados os últimos ajustes, correções de bugs específicos para a release e atualizações de documentação da versão.
Commits na branch de release devem ser apenas para correções críticas da versão.
Uma vez que a release esteja pronta, ela é mergeada para a main (para marcar a versão oficial) e também é mergeada de volta para a develop (para incorporar as correções na próxima fase de desenvolvimento).
Uma tag é criada na main para marcar o ponto da release (ex: v1.0.0).
7. Branches de Correção de Bugs (hotfix/*):

Branches de hotfix são criadas diretamente da branch main quando um bug crítico precisa ser corrigido na versão em produção (ou na última versão estável).
O nome da branch deve ser descritivo (ex: hotfix/corrigir-erro-login).
A correção é implementada na branch de hotfix e, após testes e revisão, é mergeada para a main (e uma nova tag é criada para marcar a nova versão corrigida).
A correção também deve ser mergeada de volta para a develop para garantir que o bug seja corrigido na próxima versão.
